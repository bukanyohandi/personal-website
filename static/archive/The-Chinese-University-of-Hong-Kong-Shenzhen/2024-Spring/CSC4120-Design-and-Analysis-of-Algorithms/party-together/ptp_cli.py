import os
import time
import re
from utils import *
from student_utils import *
from pthp_from_tsp import pthp_solver_from_tsp 
from ptp_solver import ptp_solver

# try:
#     from solvers.ta_pthp import ta_pthp_solver_from_tsp
# except:
#     pass

prompt_message = """
---------------------------------------------
Enter a command or type 'exit' to quit
Type '--help' to get more information
----------------------------------------------
"""

help_message = """
Commands:
  exit: quit the client
  ls_input: list all input files (default under ./inputs folder)
  ck_input: check whether student created inputs are valid or not
  test_pthp: test pthp solver 
  test_ptp: test ptp solver
  test_pthp_all: test pthp solver on all input files
  test_ptp_all: test ptp solver on all input files
  --help: get help instructions
"""

in_files = []
stu_in_files = ['20_03.in', '20_10.in', '40_03.in', '40_10.in']


def main_cli():
    """
    The main client which continues reading input from user and execute corresponding instructions
    """
    global in_files, stu_in_files
    print(f"{TITLE_ART}")
    while True:
        user_input = input(prompt_message)

        # exit the client
        if user_input.lower() == "exit":
            print("Exit the client")
            break

        # get help
        elif user_input.lower() == "--help":
            print(help_message)

        # list all input files
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "ls_input":
            print(f"Listing input files under {INPUT_FILE_DIRECTORY}")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            for file in in_files:
                print(file)

        # check whether student created inputs are valid or not
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "ck_input":
            print("Checking whether student created inputs are legitimate...")
            print(f"Searching for specified inputs {stu_in_files}")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            file_paths, in_message = input_file_names_to_file_path(' '.join(sorted(in_files)), in_files)
            count = 0
            for file in file_paths:
                file_basename = os.path.basename(file)
                if file_basename in stu_in_files:
                    print(f"\nChecking file {file_basename}...")
                    is_valid, message = is_valid_input(file)
                    if is_valid:
                        print("The input is valid")
                    else:
                        print(f"The input is not valid. Error message:\n{message}")
                    count += 1
            print(f"\nSucessfully check {count} files")
            if in_message:
                print(in_message)

        # test pthp solver on specified input files
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "test_pthp":
            print("Testing PTHP solver...")
            # prompt for specifying input files
            user_in_files_str = input(f"Select input files: ")
            print("Strating testing PTHP solver...")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            file_paths, message = input_file_names_to_file_path(user_in_files_str, in_files)
            count = 0
            for file in file_paths:
                print(f"\nReading file {os.path.basename(file)}...")
                G, H, alpha = input_file_to_instance(file)
                print('Graph constructed...')
                print(f"n = {G.number_of_nodes()}, |H| = {len(H)}, alpha = {alpha}")
                tour = pthp_solver_from_tsp(G, H)
                print('Tour generated by PTHP solver...')
                print('Analyzing the solution...')
                is_legitimate, driving_cost, walking_cost = analyze_solution(G, H, alpha, tour, {})
                print(f"Your solution is {'NOT' if not is_legitimate else ''} legimitate.")
                print(f"Total driving cost of your soluton: {driving_cost:.6f}")
                print(f"Total walking cost of your soluton: {walking_cost:.6f}")
                count += 1
            print(f"\nSucessfully test {count} files")
            if message:
                print(message)
                
        # test ptp solver on specified input files
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "test_ptp":
            print("Testing PTP solver...")
            # prompt for specifying input files
            user_in_files_str = input(f"Select input files: ")
            print("Strating testing PTP solver...")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            file_paths, message = input_file_names_to_file_path(user_in_files_str, in_files)
            count = 0
            for file in file_paths:
                print(f"\nReading file {os.path.basename(file)}...")
                G, H, alpha = input_file_to_instance(file)
                print('Graph constructed...')
                print(f"n = {G.number_of_nodes()}, |H| = {len(H)}, alpha = {alpha}")
                tour, pick_up_locs_dict = ptp_solver(G, H, alpha)
                print('Tour generated by PTP solver...')
                print("Writing solution to output file...")
                write_ptp_solution_to_out(tour, pick_up_locs_dict, os.path.basename(file))
                print("Output written.")
                print('Analyzing the solution...')
                is_legitimate, driving_cost, walking_cost = analyze_solution(G, H, alpha, tour, pick_up_locs_dict)
                print(f"Your solution is{' NOT' if not is_legitimate else ''} legimitate.")
                print(f"Total driving cost of your soluton: {driving_cost:.6f}")
                print(f"Total walking cost of your soluton: {walking_cost:.6f}")
                count += 1
            print(f"\nSucessfully test {count} files")
            if message:
                print(message)   
                
        # test pthp solver over all input files
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "test_pthp_all":
            # prompt for specifying input files
            print("Testing PTHP solver on all inputs...")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            file_paths, message = input_file_names_to_file_path(' '.join(sorted(in_files)), in_files)
            count = 0
            scores = []
            for file in file_paths:
                print(f"\nReading file {os.path.basename(file)}...")
                G, H, alpha = input_file_to_instance(file)
                print(f"n = {G.number_of_nodes()}, |H| = {len(H)}, alpha = {alpha}")
                print('Graph constructed...')
                start_time = time.time()
                pthp_tour = pthp_solver_from_tsp(G, H)
                pthp_time = time.time() - start_time
                print('Tour generated by PTHP solver...')
                # start_time = time.time()
                # ptp_tour, ptp_pick_up_locs_dict = ptp_solver(G, H, alpha)
                # ptp_time = time.time() - start_time
                # print('Tour generated by PTP solver...')
                # print("Writing solution to output file...")
                # write_ptp_solution_to_out(ptp_tour, ptp_pick_up_locs_dict, os.path.basename(file))
                # print("Output written.")
                print('Analyzing the solution...')
                pthp_is_legitimate, pthp_driving_cost, pthp_walking_cost = analyze_solution(G, H, alpha, pthp_tour, {})
                pthp_cost = pthp_driving_cost + pthp_walking_cost
                # ptp_is_legitimate, ptp_driving_cost, ptp_walking_cost = analyze_solution(G, H, alpha, ptp_tour, ptp_pick_up_locs_dict)
                # ptp_cost = ptp_driving_cost + ptp_walking_cost
                print(f"Your PTHP solution is{' NOT' if not pthp_is_legitimate else ''} legimitate.")
                print(f"Total cost of your PTHP soluton: {pthp_cost:.6f}")
                print(f"Total driving cost of your PTHP solution: {pthp_driving_cost:.6f}")
                print(f"Total walking cost of your PTHP solution: {pthp_walking_cost:.6f}")
                print(f"Running time of your PTHP solver: {pthp_time:.6f} seconds")
                # print(f"Your PTP solution is{' NOT' if not ptp_is_legitimate else ''} legimitate.")
                # print(f"Total cost of your PTP solution: {ptp_cost:.6f}")
                # print(f"Total driving cost of your PTP solution: {ptp_driving_cost:.6f}")
                # print(f"Total walking cost of your PTP solution: {ptp_walking_cost:.6f}")
                # print(f"Running time of your PTP solver: {ptp_time:.6f} seconds")
                # score = min(pthp_cost/ptp_cost + pthp_time/ptp_time, 2)
                # print(f"Score of your PTP solver: {score:.6f}")
                scores.append(pthp_cost)
                count += 1
            print(f"\nSucessfully test {count} files")
            print(f"Average cost of your PTHP solver: {sum(scores)/len(scores):.6f}")

            if message:
                print(message)      

        # test ptp solver on all input files
        elif '_'.join(re.split('[_,.\s-]', user_input.lower())) == "test_ptp_all":
            # prompt for specifying input files
            print("Testing PTP solver on all inputs...")
            if len(in_files) == 0:
                in_files = get_files_with_extension(os.path.join(os.getcwd(), INPUT_FILE_DIRECTORY), extension=".in")
            file_paths, message = input_file_names_to_file_path(' '.join(sorted(in_files)), in_files)
            count = 0
            scores = []
            for file in file_paths:
                print(f"\nReading file {os.path.basename(file)}...")
                G, H, alpha = input_file_to_instance(file)
                print(f"n = {G.number_of_nodes()}, |H| = {len(H)}, alpha = {alpha}")
                print('Graph constructed...')
                # start_time = time.time()
                # pthp_tour = pthp_solver_from_tsp(G, H)
                # pthp_time = time.time() - start_time
                # print('Tour generated by PTHP solver...')
                start_time = time.time()
                ptp_tour, ptp_pick_up_locs_dict = ptp_solver(G, H, alpha)
                ptp_time = time.time() - start_time
                print('Tour generated by PTP solver...')
                print("Writing solution to output file...")
                write_ptp_solution_to_out(ptp_tour, ptp_pick_up_locs_dict, os.path.basename(file))
                print("Output written.")
                print('Analyzing the solution...')
                # pthp_is_legitimate, pthp_driving_cost, pthp_walking_cost = analyze_solution(G, H, alpha, pthp_tour, {})
                # pthp_cost = pthp_driving_cost + pthp_walking_cost
                ptp_is_legitimate, ptp_driving_cost, ptp_walking_cost = analyze_solution(G, H, alpha, ptp_tour, ptp_pick_up_locs_dict)
                ptp_cost = ptp_driving_cost + ptp_walking_cost
                # print(f"Your PTHP solution is{' NOT' if not pthp_is_legitimate else ''} legimitate.")
                # print(f"Total cost of your PTHP soluton: {pthp_cost:.6f}")
                # print(f"Running time of your PTHP solver: {pthp_time:.6f} seconds")
                print(f"Your PTP solution is{' NOT' if not ptp_is_legitimate else ''} legimitate.")
                print(f"Total cost of your PTP solution: {ptp_cost:.6f}")
                print(f"Total driving cost of your PTP solution: {ptp_driving_cost:.6f}")
                print(f"Total walking cost of your PTP solution: {ptp_walking_cost:.6f}")
                print(f"Running time of your PTP solver: {ptp_time:.6f} seconds")
                # score = min(pthp_cost/ptp_cost + pthp_time/ptp_time, 2)
                # print(f"Score of your PTP solver: {score:.6f}")
                scores.append(ptp_cost)
                count += 1
            print(f"\nSucessfully test {count} files")
            print(f"Average cost of your PTP solver: {sum(scores)/len(scores):.6f}")

            if message:
                print(message)

        else:
            print("Command not found.\nType '--help' to get instruction list")
     